{"version":3,"sources":["about.js","nav/nav.js","loginForm.js","App.js","serviceWorker.js","index.js"],"names":["About","Nav","props","className","useStyles","makeStyles","theme","root","margin","spacing","width","color","withoutLabel","marginTop","textField","borderColor","borderBottomColor","LoginForm","prop","classes","React","useState","password","showPassword","values","setValues","noValidate","autoComplete","TextField","id","label","variant","FormControl","clsx","InputLabel","htmlFor","Input","type","value","onChange","event","target","endAdornment","InputAdornment","position","IconButton","aria-label","onClick","onMouseDown","preventDefault","FormHelperText","Home","islogin","userinfo","username","setvalue","cvalue","axios","post","then","r","d","data","window","localStorage","setItem","JSON","stringify","setUserinfo","token","uid","user","expir","expire","setLogin","to","baseurl","Error","App","c","s","useEffect","console","log","getItem","parse","exact","path","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6fde12b8.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\n\r\nfunction About() {\r\n  return (\r\n  <section>\r\n  <h2>About</h2>\r\n\r\n  </section>\r\n  );\r\n}\r\nexport default About;\r\n","// import React, { useState } from 'react';\r\n// import React from 'react';\r\nimport React from 'react';\r\nimport './nav.css'\r\nconst Nav = (props) => {\r\n\r\n\r\n   return (\r\n      <nav>\r\n         <div className='nev-brand'>faceless</div>\r\n      </nav>\r\n\r\n   )\r\n};\r\nexport default Nav;","import React from 'react'\r\nimport clsx from 'clsx';\r\nimport { makeStyles,withStyles } from \"@material-ui/core/styles\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Input from '@material-ui/core/Input';\r\nimport FilledInput from '@material-ui/core/FilledInput';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n      '& > *': {\r\n        margin: theme.spacing(1),\r\n        width: '25ch',\r\n        color:'white'\r\n      },\r\n      margin: {\r\n        margin: theme.spacing(1),\r\n      },\r\n      withoutLabel: {\r\n        marginTop: theme.spacing(3),\r\n      },\r\n      textField: {\r\n        width: '25ch',\r\n      },\r\n      \"& .MuiInputBase-input\":{\r\n        color:'white',\r\n       \r\n      },\r\n      \"&:hover fieldset\": {\r\n        borderColor: \"white\"\r\n      },\r\n      \"& label.Mui-focused\": {\r\n        color: \"white\"\r\n      },\r\n      \"& .MuiInput-underline:after\": {\r\n        borderBottomColor: \"pink\"\r\n      },\r\n      //   for full border \r\n      \"&.Mui-focused fieldset\": {\r\n        borderColor: \"pink\"\r\n      },\r\n      \"& .MuiInputLabel-formControl\":{\r\n          color:\"white\"\r\n      },\r\n      '& .MuiFormHelperText-root':\r\n      {\r\n          color:'rgba(156, 156, 156, 0.54)'\r\n      }\r\n      \r\n    },\r\n  }));\r\nconst LoginForm=(props)=>{\r\n    \r\n    const classes = useStyles();\r\n\r\n    const [values, setValues] = React.useState({\r\n        password: '',\r\n        showPassword: false,\r\n      });\r\n      const handleChange = prop => event => {\r\n        setValues({ ...values, [prop]: event.target.value });\r\n      }\r\n      const handleClickShowPassword = () => {\r\n        setValues({ ...values, showPassword: !values.showPassword });\r\n      };\r\n      const handleMouseDownPassword = event => {\r\n        event.preventDefault();\r\n      };\r\n    return (\r\n    <div>\r\n    <form className={classes.root} noValidate autoComplete=\"off\">\r\n    <TextField \r\n    id=\"outlined-basic\"\r\n      \r\n    label=\"username\"\r\n    variant=\"standard\" />\r\n    <br></br>\r\n    <TextField \r\n    id=\"outlined-basic\"\r\n      \r\n    label=\"Email\"\r\n    variant=\"standard\" />\r\n    <br></br>\r\n\r\n\r\n<FormControl className={clsx(classes.margin, classes.textField)}>\r\n          <InputLabel htmlFor=\"standard-adornment-password\">Password</InputLabel>\r\n          <Input\r\n            id=\"standard-adornment-password\"\r\n            type={values.showPassword ? 'text' : 'password'}\r\n            value={values.password}\r\n            onChange={handleChange('password')}\r\n            \r\n            endAdornment={\r\n            <InputAdornment position=\"end\">\r\n                {/* position=\"start\" */}\r\n                <IconButton\r\n                  aria-label=\"toggle password visibility\"\r\n                  onClick={handleClickShowPassword}\r\n                  onMouseDown={handleMouseDownPassword}\r\n                >\r\n                  {values.showPassword ? <Visibility /> : <VisibilityOff />}\r\n                </IconButton>\r\n              </InputAdornment>\r\n            }\r\n          />\r\n        <FormHelperText id=\"standard-adornment-helper-text\">help text</FormHelperText>\r\n     </FormControl>\r\n\r\n    </form>\r\n    </div>\r\n    );\r\n}\r\nexport default LoginForm;\r\n// rgba(156, 156, 156, 0.54)\r\n// import { useHistory } from 'react-router-dom';\r\n// routeChange=()=> {\r\n//     let path = `newPath`;\r\n//     let history = useHistory();\r\n//     history.push(path);\r\n//   }","import React, { useState, useEffect } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport axios from 'axios';\nimport './App.css';\nimport About from \"./about.js\";\nimport Nav from './nav/nav';\nimport LoginForm from './loginForm'\nfunction App(props) {\n  const [c, s] = useState(0);\n  const [islogin, setLogin] = useState(false);\n  const [userinfo, setUserinfo] = useState(\n    {\n      token: null,\n      uid: null,\n      username: null,\n      expir: null\n    });\n\n\n  let baseurl = '/test_my-app';\n\n  useEffect(() => {\n    console.log('render');\n    // at first when the page load this funciton run and every compounent change \n    //his state this funciton fire up \n    if (islogin === false) {\n      //if there is data to to get it return null\n      let d = window.localStorage.getItem('userinfo');\n      if (d != null) {\n\n        d = JSON.parse(d);\n        // console.log(d);\n\n        setUserinfo({\n          token: d.token,\n          uid: d.user.uid,\n          username: d.user.username,\n          expir: d.expire\n        });\n        setLogin(true);\n\n      }\n\n    }\n\n    return () => {\n      console.log('finish unmount');\n      // this function is call when a particular data is update complectly \n      //like here , when userinfo verible update finish then this function is call\n      console.log(userinfo.username);\n\n\n    };\n\n  }, [userinfo, islogin]);\n\n\n  return (\n    <Router>\n      <div>\n        <header>\n          <Nav></Nav>\n        </header>\n\n\n        <Switch>\n          <Route exact path={baseurl}>\n            <Home baseurl={baseurl} cvalue={c} setvalue={s} userinfo={userinfo} setUserinfo={setUserinfo} islogin={islogin} setLogin={setLogin}></Home>\n          </Route>\n          <Route path={baseurl + '/about'}>\n            <About />\n          </Route>\n\n          <Route path=\"*\"  >\n            <Error></Error>\n          </Route>\n\n        </Switch>\n\n      </div>\n    </Router>\n\n  );\n}\n\nfunction Home(props) {\n  return (\n    <div className=\"App\">\n\n      <section>\n        <div className='bg-img' ></div>\n        <div className='section-main' >\n\n          {props.islogin ? `, ${props.userinfo.username}` : ''}\n\n          <h1 className=''>Hi, *_* </h1>\n          <LoginForm></LoginForm>\n          <button className='btn' onClick={() => {\n            props.setvalue(props.cvalue + 1);\n            let url = 'http://192.168.0.103:8080/api/account/token/';\n            let data = {\n              username: 'user',\n              password: 'admin',\n            };\n\n            axios.post(url, data).then((r) => {\n              //get the responce data \n\n              let d = r.data;\n\n              window.localStorage.setItem('userinfo', JSON.stringify(d));\n\n              props.setUserinfo({\n                token: r.data.token,\n                uid: d.user.uid,\n                username: d.user.username,\n                expir: d.expire\n              });\n\n              props.setLogin(true);\n\n\n\n            });\n\n          }\n          }>login</button>\n        </div>\n      </section>\n\n\n      <footer>\n        <hr></hr>\n        <div>\n          2019-Faceless\n        </div>\n        <div>\n          <Link to={props.baseurl} >Home</Link>|<Link to={'./about/'}>About</Link>\n        </div>\n      </footer>\n\n\n\n    </div>\n  );\n}\n\nfunction Error() {\n  return (<section>404</section>);\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}