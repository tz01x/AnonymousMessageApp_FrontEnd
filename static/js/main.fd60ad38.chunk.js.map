{"version":3,"sources":["about.js","nav/navbar.js","App.js","serviceWorker.js","index.js"],"names":["About","navbar","className","name","url","map","item","index","key","to","isActive","match","location","Home","onClick","axios","get","headers","then","res","console","log","catch","r","request","response","Error","App","props","exact","path","isLocalhost","Boolean","window","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"uSAMeA,MAHf,WACI,OAAO,sCCmCIC,G,MApCA,WAMZ,OACG,6BACG,yBAAKC,UAAU,aAAf,UACA,yBAAKA,UAAU,aARN,CAAC,CAACC,KAAK,OAAOC,IAAI,KAAM,CAACD,KAAK,QAAQC,IAAI,UAAW,CAACD,KAAK,WAAWC,IAAI,cAWtEC,IAAI,SAACC,EAAMC,GAClB,OAAO,yBAAKL,UAAU,WAAWM,IAAKD,GACnC,kBAAC,IAAD,CAASE,GAAIH,EAAKF,IAClBM,SAAU,SAACC,EAAMC,MAQfN,EAAKH,aCgBzB,SAASU,IACP,OACF,yBAAKX,UAAU,OAET,iCAIA,yBAAKA,UAAU,WACf,yBAAKA,UAAU,MAAf,uBAGA,wBAAIA,UAAU,IAAd,SACA,4BAAQA,UAAU,MAAMY,QAAS,WAI/BC,IAAMC,IAAI,QAAQ,CAChBC,QAAQ,CACN,8BAA+B,OAEhCC,KAAK,SAACC,GACPC,QAAQC,IAAIF,KAEXG,MAAM,SAACC,GACLA,EAAEC,QACHJ,QAAQC,IAAI,gBAELE,EAAEE,UACTL,QAAQC,IAAI,uBAhBlB,UAyBA,6BAASnB,UAAU,YAEjB,sCAIF,qDAUN,SAASwB,IACP,OAAQ,oCAEKC,MAxFf,SAAaC,GAIX,OACE,kBAAC,IAAD,KACA,6BACE,gCACA,kBAAC,EAAD,OAIF,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,gBAChB,kBAACjB,EAAD,OAEA,kBAAC,IAAD,CAAQiB,KAAK,UACb,kBAAC,EAAD,OAGA,kBAAC,IAAD,CAAQA,KAAK,KACb,kBAACJ,EAAD,WCpBAK,EAAcC,QACW,cAA7BC,OAAOrB,SAASsB,UAEe,UAA7BD,OAAOrB,SAASsB,UAEhBD,OAAOrB,SAASsB,SAASvB,MACvB,2DAsCN,SAASwB,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTlB,KAAK,SAAAuB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1B3B,QAAQC,IACN,iHAKEgB,GAAUA,EAAOW,UACnBX,EAAOW,SAASP,KAMlBrB,QAAQC,IAAI,sCAGRgB,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUR,UAO5BnB,MAAM,SAAA4B,GACL9B,QAAQ8B,MAAM,4CAA6CA,KC1FjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBjB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,eAAwBvB,OAAOrB,SAAS6C,MACpDC,SAAWzB,OAAOrB,SAAS8C,OAIvC,OAGFzB,OAAO0B,iBAAiB,OAAQ,WAC9B,IAAMvB,EAAK,UAAMoB,eAAN,sBAEPzB,IAgEV,SAAiCK,EAAOC,GAEtCuB,MAAMxB,GACHlB,KAAK,SAAAO,GAEJ,IAAMoC,EAAcpC,EAASR,QAAQD,IAAI,gBAEnB,MAApBS,EAASqC,QACO,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5CzB,UAAUC,cAAcyB,MAAM9C,KAAK,SAAAuB,GACjCA,EAAawB,aAAa/C,KAAK,WAC7Be,OAAOrB,SAASsD,aAKpB/B,EAAgBC,EAAOC,KAG1Bf,MAAM,WACLF,QAAQC,IACN,mEArFA8C,CAAwB/B,EAAOC,GAI/BC,UAAUC,cAAcyB,MAAM9C,KAAK,WACjCE,QAAQC,IACN,gHAMJc,EAAgBC,EAAOC,MCvC/BE,K","file":"static/js/main.fd60ad38.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\n\r\nfunction About() {\r\n    return <h2>About</h2>;\r\n  }\r\nexport default About ;\r\n","import React from 'react';\r\nimport {Link,NavLink} from 'react-router-dom'\r\nimport './nav.css'\r\nconst navbar = () => {\r\n   let nevitems = [{name:'home',url:'/'}, {name:'about',url:'/about'}, {name:'Settings',url:'/settings'}]\r\n\r\n\r\n\r\n\r\n   return (\r\n      <nav>\r\n         <div className='nev-brand'>Mypage</div>\r\n         <div className='nev-items'>\r\n\r\n\r\n            {nevitems.map((item, index) => {\r\n               return <div className='nev-item' key={index}>\r\n                  <NavLink to={item.url}\r\n                  isActive={(match,location)=>{\r\n                     //no idea\r\n                     \r\n                     // console.log(\"match is calling \",match);\r\n                     // console.log(location);\r\n                     \r\n                     \r\n                  }}\r\n                  >{item.name}</NavLink>\r\n               </div>;\r\n\r\n            })}\r\n\r\n         </div>\r\n\r\n\r\n\r\n      </nav>\r\n\r\n   )\r\n};\r\nexport default navbar;\r\n","import React, { useState } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport axios from 'axios';\nimport './App.css';\nimport About  from \"./about.js\";\nimport Navbar from './nav/navbar';\nfunction App(props) {\n  \n  \n\n  return (\n    <Router>\n    <div>\n      <header>\n      <Navbar></Navbar>\n      </header>\n       \n    \n    <Switch>\n    <Route exact path=\"/test_my-app\">\n      <Home></Home>\n      </Route>\n      <Route  path=\"/about\">\n      <About/>\n      </Route>\n      \n      <Route  path=\"*\"  >\n      <Error></Error>\n      </Route>\n    </Switch>\n\n    </div>\n    </Router>\n   \n  );\n}\n\nfunction Home(){\n  return(\n<div className=\"App\">\n      \n      <section>\n        \n      \n      \n      <div className='bg-img' ></div>\n      <div className='aa' >\n     \n      this is main section\n      <h1 className=''>Title</h1>\n      <button className='btn' onClick={()=>{\n        var url='http://192.168.0.103:8080/list/';\n        // fetch(url).then((r)=>console.log(r)\n        // );\n        axios.get('list/',{\n          headers:{\n            'Access-Control-Allow-Origin': '*',\n          },\n        }).then((res)=>{\n          console.log(res);\n          \n        }).catch((r)=>{\n          if(r.request){\n            console.log('error in req');\n            \n          }else if(r.response){\n            console.log('error response ');\n            \n          }\n          \n        });\n      }\n      }>Call</button>\n      </div>\n      </section>\n      <section className=\"osection\">\n        \n        <h1>hello</h1>\n\n        \n      </section>\n      <footer>\n        this is a footer\n      </footer>\n      \n      \n      \n    </div>\n  );\n}\n\nfunction Error(){\n  return (<div>404</div>);\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}